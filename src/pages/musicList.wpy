<template>
  <view class="container">
    <view class="default_clolor" style="width: 100vw;height: 100vh;position:fixed;">
      <image style="width: 427rpx;height: 128rpx;" src="/assets/home_emptytext.png" />
    </view>
    <view class='top_theme'>
      <image src='../assets/arr_l.png' mode='aspectFit' class='back' @tap.stop='back' />
      <view class='theme_txt'>{{sheetName}}</view>
      <view class='theme_share'>推荐给好友</view>
      <button class='theme_share_b' plain="true" open-type="share" data-id='invite' />
    </view>
    <swiper indicator-dots="{{false}}" circular="{{true}}" current="{{curIdex}}" autoplay="{{false}}" vertical="true" bindchange="bindChange" bindanimationfinish="onAnimationChange">
      <view class="default_clolor" style="width: 100vw;height: 100vh;position:absolute;">
        <image style="width: 427rpx;height: 128rpx;" src="/assets/home_emptytext.png" />
      </view>
      <repeat for="{{homeData}}" key="index" index="index" item="item">
        <swiper-item style="position: relative;" class='swiperItem' @tap.stop="onBackgroundTap">
          <view class="default_clolor" style="width: 100vw;height: 100vh;position:absolute;">
            <image style="width: 427rpx;height: 128rpx;" src="/assets/home_emptytext.png" />
          </view>
          <image wx:if="{{currentIndex === index}}" style="width: 100vw;height: 100vh;position:absolute" src="{{item.giftUrl + '?x-oss-process=image/resize,m_lfit,h_' + screenHeight +',w_' + screenWidth}}" mode="aspectFill" />
          <view class="mask" style="width: 100vw;height: 100vh;position:absolute" />
          <view class="music_name_container" wx:if="{{!isOpened && currentIndex === index}}">
            <view class="name">{{currentStuff.title}}</view>
            <view class="album" wx:if='{{item.challengeNum}}'>本周{{item.challengeNum}}人参与领唱挑战</view>
            <view class="album" wx:else>本周暂无人参与领唱挑战</view>
          </view>
          <view class="lyric_container" wx:if="{{!isOpened && currentIndex === index }}" style="margin-top:{{item.homeRankOutDto ? '0' :'20rpx'}};">
            <view class="lyric_main_container">
              <text class="lyric_main">{{mainLyric.lyric}}</text>
            </view>
            <text class="translation_lyric">{{translationLyric.lyric}}</text>
          </view>
          <!-- 上周领唱 -->
          <view class='last_week_rank' wx:if='{{item.homeRankOutDto}}'>
            <view class='last_week_top'>
              <view class='last_week_topl'>
                <view class='period_box' @tap.stop='showOldRanking'>
                  <image src='../assets/home_lead_bg.png' class='rank_title' />
                  <view class='period_title'>第{{item.homeRankOutDto.periods}}期领唱</view>
                  <image src='../assets/redbag_question.png' class='period_doubt' />
                </view>
                <view class='nickname_box'>
                  <view class='nickname'>{{item.homeRankOutDto.nickName}}</view>
                </view>
              </view>
              <view class='last_week_topr' @tap.stop='showLastWeekRank'>
                <view class='last_week_topr_title'>第{{item.homeRankOutDto.periods}}期榜单</view>
                <image src='../assets/arr_r_w.png' class='indacator' />
              </view>
            </view>
            <view class='last_week_bottom'>
              <view class='rank_play_audio_box' @tap.stop='playMusic({{item.homeRankOutDto}})'>
                <image src="{{playStatus ? '../assets/sing_pause_btn_l.png' : '../assets/sing_play_btn_l.png'}}" class='rank_play_btn' />
                <view class='rank_play_tips'>播放</view>
                <image src='{{item.homeRankOutDto.headImg}}' class='userImage' @tap.stop='showOthers' />
                <image src='../assets/leadprofile_follow_btn.png' class='follow_btn' wx:if='{{!item.homeRankOutDto.follow}}' @tap.stop='followAction' />
              </view>
              <view class='rank_like_box' @tap.stop='loveAction'>
                <image src="{{ item.homeRankOutDto.love || globalLove ? '../assets/leadprofile_like_clicked.png' : '../assets/leadprofile_like_normal.png'}}" class='rank_like_icon' />
                <view class='rank_like_tips'>{{globalLove? globalLoveNum: item.homeRankOutDto.loveNum }}</view>
              </view>
              <image src='../assets/homeindex_redbag.png' class='rank_redbag' @tap.stop='showRedBag' />
            </view>
          </view>
          <view class="home_right_container" style="top: 700rpx;" wx:if="{{!isOpened && loginType === 1 && currentIndex === index}}" data-id="{{index}}" @tap.stop="likeSong">
            <image src="{{item.addFollow ? item.musicImg: '/assets/home_sing.png'}}" style=" border-radius:{{item.addFollow ?  '50%' : '0'}};" class="icon" />
            <view class="love_count">{{item.loveCount}}</view>
          </view>
          <!-- 添加到练歌 -->
          <view class='add_practice_sing' @tap.stop='dismissPracticeSingTips' wx:if="{{loginType === 1 && !item.addFollow && !item.dismissAddPractice}}">
            <image class='practice_bg' src='../assets/bubble_add.png' />
            <view class='practice_txt'>添加到想唱</view>
            <image class='practice_close' src='../assets/bubble_close.png' />
          </view>
          <view class="home_right_container" style="top:840rpx;" @tap.stop='noEvent' wx:if="{{!isOpened && loginType === 1 && currentIndex === index}}">
            <image src="/assets/home_share.png" class="icon" />
            <view class="number" wx:if="{{item.shareCount > 0}}">{{item.shareCount}}</view>
            <button style="height:100%; width: 100%;border:1px solid transparent;background-color:transparent; position: absolute; top: 0rpx; left: 0rpx;" plain="true" open-type="share" />
          </view>
          <image class="play_icon" src="/assets/play.png" wx:if="{{item.playStatus === 0}}" />
        </swiper-item>
      </repeat>
    </swiper>
    <button wx:if="{{(!loginType || loginType === 0) && loading}}" class="login_button" open-type="getUserInfo" bindgetuserinfo="onGotUserInfo"></button>
    <homePractice :stuff.sync="currentStuff" />    
    <oldRanking/>
    <palletMask wx:if='{{!isShowedAddMyMin && isAdded > 0}}' />
   
    </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/api/api'
  import AudioManager from '@/models/audioManager'
  import {
    request
  } from '@/utils/requestUtils'
  import HomeDataManager from '@/models/homeDataManager'
  const homeDataManager = new HomeDataManager()
  import NetWorkManager from '@/utils/network'
  const netWorkManager = new NetWorkManager()
  import homePractice from '@/components/homePractice'
  import AudioInnerPlayer from '@/utils/audioPlayer'
  import oldRanking from '@/components/oldRanking'
  import palletMask from '@/components/Add2PalletMask'
  export default class Index extends wepy.page {
    components = {
      homePractice,
      oldRanking,
      palletMask
    };
    data = {
      sheetId: '',
      ideaId: '',
      loading: false,
      delayTask: '',
      introductShown: false,
      onlineCount: '',
      onlineUsers: '',
      uid: '',
      loginType: '',
      showDanma: false,
      showReply: false,
      showSing: false,
      currentStuff: '',
      isOpened: false,
      currentIndex: 0,
      curIdex: 0, // swiper 的坐标
      homeData: '',
      nextPage: 0,
      mainLyric: '',
      pmainLyric: '',
      nextLyric: '',
      translationLyric: '',
      currentLyricIndex: 0,
      currentPLyricIndex: 0,
      lyricArr: '',
      translationLyricArr: '',
      redNum: '',
      tipText: '',
      screenHeight: 667,
      screenWidth: 375,
      progress: 0,
      currentTime: 0, // audio 当前进度
      firstTips: '',
      secondTips: '',
      showNetWorkToast: false,
      showSingIntroduct: false,
      homePlayState: true, // 首页播放状态
      showAddMyMinParagram: false,
      playStatus: 0,
      globalLove: false,
      globalLoveNum: '',
      sheetName: '',
      isShowedAddMyMin: true,
      isAdded: false
    };
    computed = {};
    methods = {
      back() {
        console.log(111)
        wepy.navigateBack({
          delta: 1
        })
      },
      playMusic(item) {
        if (this.playStatus === 0) {
          this.stopPlayMusic()
          this.singPlayer = new AudioInnerPlayer()
          this.singPlayer.play(item.songUrl)
          this.playStatus = 1
          api.addlog({
            query: {
              challengeId: item.challengeId
            }
          })
        } else {
          this.playStatus = 0
          this.singPlayer.stop()
          this.singPlayer.destroy()
          this.singPlayer = ''
          this.onBackgroundTap()
        }
        this.$apply()
      },
      showOthers() {
        wepy.navigateTo({
          url: `/pages/userInfo/others?userId=${this.currentStuff.homeRankOutDto.userId}`
        })
      },
      showRedBag() {
        wepy.navigateTo({
          url: `/pages/subHome/hansel`
        })
      },
      showOldRanking() {
        this.$invoke('oldRanking', 'show')
      },
      playSing(index) {
        this.onBackgroundTap()
        let item = this.homeData[index]
        if (this.playStatus === 0) {
          this.stopPlayMusic()
          this.singPlayer = new AudioInnerPlayer()
          this.singPlayer.play(item.homeRankOutDto.songUrl)
          this.playStatus = 1
        } else {
          this.playStatus = 0
          this.singPlayer.stop()
          this.singPlayer.destroy()
          this.singPlayer = ''
          this.resumePlayMusic()
        }
      },
      async loveAction() {
        if (this.currentStuff.homeRankOutDto.love) return
        const res = await api.likeSong({
          query: {
            ideaId: this.currentStuff.ideaId,
            challengeId: this.currentStuff.homeRankOutDto.challengeId
          }
        })
        if (res.code === 0) {
          this.currentStuff.homeRankOutDto.love = true
          this.currentStuff.homeRankOutDto.loveNum++
          this.$apply()
        }
        console.log(res)
      },
      async followAction() {
        console.log(this.currentStuff.homeRankOutDto)
        const res = await api.followUser({
          id: this.currentStuff.homeRankOutDto.userId
        })
        if (res.code === 0) {
          this.currentStuff.homeRankOutDto.follow = true
          this.$apply()
        }
      },
      showLastWeekRank() {
        console.log('上周榜单')
        wepy.navigateTo({
          url: `/pages/rank/oldRanking?ideaId=${this.currentStuff.ideaId}`
        })
      },
      dismissAudioAuthBox() {
        this.showAudioAuthBox = false
      },
      dismissPracticeSingTips() {
        // 后台返回数据。取反
        this.currentStuff.dismissAddPractice = true
      },
      noEvent() {},
      goToUsers(e) {
        const userId = wepy.getStorageSync('userId')
        const userIndex = e.currentTarget.dataset.id
        const user = this.onlineUsers[userIndex]
        if (userId !== user.userId) {
          wepy.navigateTo({
            url: `otherInfo?uid=${user.userId}`
          })
        }
      },
      onBack() {
        wepy.navigateBack({
          delta: 1
        })
      },
      async likeSong(e) {
        if (this.loginType === 0 || !this.loginType) {
          return
        }
        const index = e.currentTarget.dataset.id
        const idea = this.homeData[index]
        var res
        if (!idea.addFollow) {
          res = await api.addPracticeList({
            query: {
              ideaId: this.currentStuff.ideaId
            }
          })
          if (res.code === 0) {
            // 一次小程序使用生命周期，直提示1vi
            if (this.$parent.globalData.isGifMusicListAdded === false) {
              this.isAdded = true
              this.$parent.globalData.isGifMusicListAdded = true
            }
            idea.addFollow = true
            idea.loveCount++
            let loveCount = this.$parent.globalData.loveCount
            wx.setTabBarBadge({
              index: 1,
              text: `${++loveCount}`
            })
            this.$parent.globalData.loveCount = loveCount
          }
        } else {
          wepy.navigateTo({
            url: `/pages/rank/singerRank?ideaId=${idea.ideaId}&type=1&title=${this.currentStuff.title}`
          })
        }
        this.$apply()
      },
      onBackgroundTap() {
        this.onBackgroundTap()
      },
      closeTip() {
        this.tipText = ''
        this.$apply()
      }
    };
    onAnimationChange() {
      this.$apply()
    }
    events = {
      dimissMinParagramTips() {
        this.isShowedAddMyMin = true
        this.$parent.globalData.isShowedAddMyMin = true
        this.$apply()
      },
      challenge() {
        this.stopPlayMusic()
        wepy.navigateTo({
          url: `/pages/subHome/challenge?ideaId=${this.currentStuff.ideaId}`
        })
      },
      sing() {
        // this.stopPlayMusic()
        wepy.setStorageSync('currentLyric', this.lyricArr)
        wepy.setStorageSync('currentStuff', this.currentStuff)
        wepy.navigateTo({
          url: `/pages/subHome/sing?ideaId=${this.currentStuff.ideaId}`
        })
      },
      displayNextLyric(time) {
        this.displayNextLyric(time)
      },
      onBackgroundTap() {
        this.stopPlayMusic()
      },
      dismissNetDialog() {
        this.showNetWorkToast = false
        this.$apply()
      },
      onSwipeHintShown() {
        this.introductShown = false
      },
      onSingIntroduct(isShown) {
        console.log('isShown', isShown)
        if (!isShown) {
          this.$invoke('swipeHint', 'show')
        } else {
          this.introductShown = true
        }
      },
      showSingIntroduct(t) {
        this.showSingIntroduct = t
        this.$apply()
      }
    };
    async onLoad(option) {
      this.sheetId = option.sheetId
      this.sheetName = option.sheetName
      this.initNetworkListener()
      this.uid = option.uid
      this.loginType = wepy.getStorageSync('loginType')
      this.loading = true
      this.currentIndex = 0
      this.nextPage = 0
      this.$apply()
      //   this.$parent.globalData.channel = option.channel
      if (!this.$parent.globalData.audioManager) {
        this.$parent.globalData.audioManager = new AudioManager()
      }
      this.screenWidth = this.$parent.globalData.screenWidth
      this.screenHeight = this.$parent.globalData.screenHeight
      this.setAudioListener()
      var body
      if (option.ideaId) {
        body = {
          query: {
            ideaId: parseInt(option.ideaId),
            pageSize: 20,
            pageNo: 1
          }
        }
      } else {
        body = {
          query: {
            pageSize: 20,
            pageNo: 1
          }
        }
      }
      if (this.$parent.globalData.channel) {
        body.query.channel = this.$parent.globalData.channel
      }
      body.query.sheetId = parseInt(this.sheetId)
      const res = await api.fetchHome(body)
      console.log(body)
      if (res.code === 0) {
        this.nextPage = res.nextPage
        homeDataManager.setData(res.ideaList)
        this.homeData = homeDataManager.getDisplayData()
        this.currentStuff = this.homeData[0]
        this.currentStuff.playStatus = 1
        this.initMusic(this.currentStuff, this.$parent.globalData.audioManager, homeDataManager.getHomeData())
        this.initLoadMoreObserver()
      }
      this.initListener()
      this.$apply()
    }
    initListener() {
      //  暂停首页歌曲播放
      this.$parent.event.offEvent('onBackgroundTap')
      this.$parent.event.subscribeOn(
        'onBackgroundTap',
        this.stopPlayMusic.bind(this)
      )
    }
    onBackgroundTap() {
      let audioContext = this.$parent.globalData.audioManager
      // this.$broadcast('stopSingPlayer')
      if (audioContext.isPaused()) {
        this.currentStuff.playStatus = 1
        this.homePlayState = true
        audioContext.resume()
        this.$parent.event.emit('stopSubPagePlayer')
        if (this.singPlayer) {
          this.playStatus = 0
          this.singPlayer.stop()
          this.singPlayer.destroy()
          this.singPlayer = ''
        }
      } else {
        this.currentStuff.playStatus = 0
        this.homePlayState = false
        audioContext.pause()
      }
      this.$apply()
    };
    resumePlayMusic() {
      let audioContext = this.$parent.globalData.audioManager
      audioContext.resume()
      this.homePlayState = true
      this.currentStuff.playStatus = 1
      this.$apply()
    }
    stopPlayMusic() {
      console.log('stopPlayMusic now')
      let audioContext = this.$parent.globalData.audioManager
      if (audioContext && this.currentStuff) {
        audioContext.pause()
        this.homePlayState = false
        this.currentStuff.playStatus = 0
        this.$apply()
      }
    }
    async initNetworkListener() {
      // set network listener
      let that = this
      const n = await wepy.getNetworkType()
      if (n.networkType === '4g') {
        that.showNetWorkToast = true
        that.firstTips = '4G网络下，每首歌需要1-2M左右流量'
        that.secondTips = '注意流量消耗哦'
        that.$apply()
      }
      const netWorkChange = (res) => {
        if (res.isConnected) {
          const networkType = res.networkType
          if (networkType === '2g' || networkType === '3g' || networkType === 'unknown' || networkType === 'none') {
            that.showNetWorkToast = true
            that.firstTips = '当前的网速较慢'
            that.secondTips = '建议在Wifi下体验 '
            that.$apply()
          }
        } else {
          wepy.showToast({
            title: '网络似乎断开了',
            icon: 'none',
            duration: 2000,
            mask: true
          })
        }
      }
      netWorkManager.setNetworkLister(netWorkChange)
    }
    initLoadMoreObserver() {
      const loadMoreObserve = async() => {
        var body = {
          query: {
            pageNo: this.nextPage,
            pageSize: 20
          }
        }
        body.query.sheetId = parseInt(this.sheetId)
        const res = await api.fetchHome(body)
        console.log(body)
        if (res.code === 0) {
          homeDataManager.concatMore(res.ideaList, res.nextPage)
          this.nextPage = res.nextPage
        }
        this.$parent.globalData.audioManager.assign(
          homeDataManager.getHomeData()
        )
        this.$apply()
      }
      homeDataManager.setLoadMoreObserver(loadMoreObserve)
    }
    bindChange(e) {
      if (e.detail.source === 'touch') {
        this.$parent.event.emit('stopSubPagePlayer')
        this.clearPreIdeaStuff()
        if (this.$parent.globalData.audioManager.getCurrentTime() > 2) {
          this.operation({
            ideaId: this.currentStuff.ideaId,
            type: 0,
            playTime: this.$parent.globalData.audioManager.getCurrentTime()
          })
        }
        this.currentStuff = homeDataManager.change(e.detail.current)
        this.switchMusic()
        this.currentIndex = e.detail.current
        this.homeData = homeDataManager.getDisplayData()
        this.currentStuff.playStatus = 1
        this.$apply()
        if (this.delayTask) {
          clearTimeout(this.delayTask)
        }
        this.delayTask = setTimeout(() => {
          this.requestLyric(this.currentStuff)
        }, 2000)
        if (this.playStatus === 1) {
          this.singPlayer.stop()
        }
        this.playStatus = 0
      }
    }
    initMusic(stuff, audioManager, data) {
      audioManager.setData(data)
      this.requestLyric(stuff)
      const that = this
      const onUpdate = (time) => {
        that.displayLyric(time)
      }
      audioManager.setTimeUpdateFuc(onUpdate)
    }
    clearPreIdeaStuff() {
      this.onlineCount = 0
      this.onlineUsers = ''
      this.currentLyricIndex = 0
      this.mainLyric = ''
      this.translationLyric = ''
      this.currentLyricObj = ''
      this.translationLyricArr = ''
      this.lyricArr = ''
      this.$apply()
    }
    calSeekLyricIndex(t) {
      for (let index = 0; index < this.lyricArr.length; index++) {
        const element = this.lyricArr[index]
        if (element.time > t) {
          this.currentLyricIndex = index - 1
          this.$apply()
          break
        }
      }
    }
    switchMusic() {
      var audioContext = this.$parent.globalData.audioManager
      audioContext.start(homeDataManager.getCurrentDataIndex())
    }
    async requestLyric(stuff) {
      if (!stuff.lyricUrl) {
        return
      }
      const {
        statusCode,
        data
      } = await request(stuff.lyricUrl, {
        method: 'GET'
      })
      if (statusCode === 200) {
        this.lyricArr = this.parseLyric(data)
        this.$apply()
      }
      if (!stuff.tlyricUrl) {
        return
      }
      const res = await request(stuff.tlyricUrl, {
        method: 'GET'
      })
      if (res.statusCode === 200) {
        this.translationLyricArr = this.parseLyric(res.data)
        this.$apply()
      }
    }
    async operation(params) {
      return await api.postIdeaOperation({
        query: params
      })
    }
    displayLyric(currentTime) {
      if (this.lyricArr) {
        if (this.currentLyricIndex < this.lyricArr.length - 1) {
          var next = this.currentLyricIndex + 1
          var lyricObj = this.lyricArr[next]
          if (lyricObj.time <= currentTime) {
            this.currentLyricIndex = next
            this.mainLyric = lyricObj
            this.translationLyric = this.translationLyricArr[next]
            this.$apply()
          }
        }
      }
    }
    // 练习模式歌词
    displayNextLyric(currentTime) {
      if (this.lyricArr) {
        if (this.currentPLyricIndex < this.lyricArr.length - 1) {
          let next = this.currentPLyricIndex + 1
          let nextn = this.currentPLyricIndex + 1 + 1
          let lyricObj = this.lyricArr[next]
          let nlyricObj = ''
          if (nextn <= this.lyricArr.length) {
            nlyricObj = this.lyricArr[nextn]
          }
          if (lyricObj.time <= currentTime) {
            this.currentPLyricIndex = next
            this.pmainLyric = lyricObj
            this.nextLyric = nlyricObj || ''
            this.$apply()
          }
        }
      }
    }
    parseLyric(lrc) {
      var lyrics = lrc.split('\n')
      var lrcArray = []
      for (var i = 0; i < lyrics.length; i++) {
        var lyric = decodeURIComponent(lyrics[i])
        var timeReg = /\[\d*:\d*((\.|\:)\d*)*\]/g
        var timeRegExpArr = lyric.match(timeReg)
        if (!timeRegExpArr) continue
        var clause = lyric.replace(timeReg, '')
        for (var k = 0, h = timeRegExpArr.length; k < h; k++) {
          var t = timeRegExpArr[k]
          var min = Number(String(t.match(/\[\d*/i)).slice(1))
          var sec = Number(String(t.match(/\:\d*/i)).slice(1))
          var time = min * 60 + sec
          var lrcObj = {}
          if (clause) {
            lrcObj.time = time
            lrcObj.lyric = clause
            // lrcObj.liked = false
            lrcArray.push(lrcObj)
          }
        }
      }
      return lrcArray
    }
    onShareAppMessage(res) {
      console.log(res)
      let ideaInfo = this.homeData[this.currentIndex]
      let title = '「' + ideaInfo.title + '」' + '超好听，墙裂推荐！'
  
      this.operation({
        ideaId: this.currentStuff.ideaId,
        type: 3
      })
      ideaInfo.shareCount += 1
      return {
        title: title,
        path: '/pages/index?uid=' + wepy.getStorageSync('userId') + '&ideaId=' + this.currentStuff.ideaId + '&shareType=3&shareId=111',
        imageUrl: ideaInfo.musicImg,
        success: function(res) {}
      }
    }
    async onShow() {
      this.isShowedAddMyMin = this.$parent.globalData.isShowedAddMyMin
      // 校验歌曲index
      if (this.$parent.globalData.audioManager) {
        const managerIndex = this.$parent.globalData.audioManager.getIndex()
        if (this.currentIndex === managerIndex) {
          if (this.$parent.globalData.audioManager) {
            if (this.$parent.globalData.audioManager.isPaused()) {
              //   const onFront = this.$parent.globalData.onFront
              //   console.log('onFront', onFront)
              //   console.log('playState', this.$parent.globalData.playState)
              //   console.log('this.homePlayState', this.homePlayState)
              const playState = this.$parent.globalData.playState
              if (playState) {
                // 没有播放过非首页歌曲
                if (this.homePlayState) {
                  //  继续播放
                  this.resumePlayMusic()
                } else {
                  // 暂停播放
                  this.stopPlayMusic()
                }
              } else {
                // 播放过非首页歌曲，暂停播放
                this.stopPlayMusic()
              }
              // }
            }
          }
        } else {
          this.clearPreIdeaStuff()
          this.curIdex = homeDataManager.playNextMusic(managerIndex)
          this.currentIndex = this.curIdex
          this.homeData = homeDataManager.getDisplayData()
          this.currentStuff = this.homeData[this.currentIndex]
          this.currentStuff.playStatus = 1
          this.$apply()
          // this.$invoke('danmaCanvas', 'start')
          this.requestLyric(this.currentStuff)
        }
      }
      try {} catch (error) {
        console.log(error)
      }
      this.setAudioListener()
      this.$parent.globalData.playState = true
      this.globalLove = this.$parent.globalData.Lvoe
      if (this.globalLove) {
        this.globalLoveNum = this.$parent.globalData.loveNum
      }
      this.$apply()
    }
    onUnload() {
      // 页面注销
      this.$parent.globalData.audioManager.stop()
      this.$parent.globalData.playState = false
    }
    onHide() {
      // this.$broadcast('stopSingPlayer')
      this.unsetAudioListener()
    }
    unsetAudioListener() {
      if (this.$parent.globalData.audioManager) {
        this.$parent.globalData.audioManager.setSongSwitchedListener()
      }
    }
    setAudioListener() {
      let that = this
      const onSwitched = managerIndex => {
        // that.curIdex = homeDataManager.playNextMusic(managerIndex)
        // that.homeData = homeDataManager.getDisplayData()
        // that.$apply()
        that.clearPreIdeaStuff()
        this.curIdex = homeDataManager.playNextMusic(managerIndex)
        that.currentIndex = this.curIdex
        that.homeData = homeDataManager.getDisplayData()
        that.currentStuff = this.homeData[this.currentIndex]
        that.currentStuff.playStatus = 1
        that.$apply()
        // that.$invoke('danmaCanvas', 'start')
        that.requestLyric(this.currentStuff)
      }
      if (this.$parent.globalData.audioManager) {
        this.$parent.globalData.audioManager.setSongSwitchedListener(onSwitched)
      }
    }
  }
</script>
<style lang="less" scoped>
  .back {
    width: 20rpx;
    height: 34rpx;
    z-index: 100;
    padding: 20rpx 30rpx;
  }
  swiper {
    width: 100vw;
    height: 100vh;
    position: fixed;
  }
  .mask {
    opacity: 0.2;
    background: #000000;
    z-index: 1;
  }
  .default_clolor {
    z-index: -1;
    background: #000000;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .top_theme {
    margin-top: 54rpx;
    width: 100vw;
    height: 64rpx;
    display: flex;
    justify-items: flex-start;
    align-items: center;
    z-index: 1;
    position: fixed;
    .theme_icon {
      width: 54rpx;
      height: 54rpx;
    }
    .theme_txt {
      font-family: PingFangSC-Medium;
      font-size: 36rpx;
      color: #FFFFFF; //   margin-left: 20rpx;
    }
    .theme_share {
      background: #FFDC51;
      border-radius: 34rpx;
      width: 150rpx;
      height: 52rpx;
      line-height: 52rpx;
      font-family: PingFangSC-Medium;
      font-size: 24rpx;
      color: #303030;
      text-align: center;
      margin-left: 38rpx;
    }
    .theme_share_b {
      width: 150rpx;
      height: 52rpx;
      border: 1px solid transparent;
      background-color: transparent;
      position: absolute;
      top: 6rpx;
      right: 395rpx;
    }
  }
  .home_present_container {
    position: absolute;
    top: 402rpx;
    height: 86rpx;
    display: flex;
    z-index: 1;
    .expend_box {
      position: absolute;
      top: 0rpx;
      left: 160rpx;
      height: 86rpx;
      width: 600rpx;
      .expand_title {
        font-family: PingFangSC-Medium;
        font-size: 24rpx;
        color: #ffffff;
        letter-spacing: 0;
      }
      .user_container {
        width: 600rpx;
        height: 64rpx;
        display: flex;
        align-items: center;
        flex-direction: row;
        position: absolute;
        bottom: -10rpx;
        left: 0;
        .small {
          border-radius: 24rpx;
          width: 48rpx;
          height: 48rpx;
          margin-right: 6rpx;
        }
      }
    }
  }
  .lyric_container {
    // position: absolute;
    // top: 346rpx;
    height: 200rpx;
    width: 670rpx;
    display: flex;
    flex-direction: column;
    z-index: 1;
    .lyric_main_container {
      display: flex;
      flex-direction: row;
      .lyric_main {
        font-family: SFUIDisplay-Black;
        font-size: 44rpx;
        font-weight: bold;
        color: #ffffff;
        letter-spacing: 0;
        line-height: 26px;
        margin-left: 40rpx;
        flex: 1;
        word-break: break-all;
        margin-top: 28rpx;
        max-height: 120rpx;
        text-overflow: -o-ellipsis-lastline;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
      }
    }
    .translation_lyric {
      margin-left: 40rpx;
      font-family: PingFangSC-Semibold;
      font-size: 26rpx;
      color: #ffffff;
      letter-spacing: 0;
      word-break: break-all;
      height: 40rpx;
      line-height: 40rpx;
      margin-top: 6rpx;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
  }
  .home_right_container {
    position: absolute;
    padding: 20rpx;
    right: 0rpx;
    display: flex;
    flex-direction: column;
    align-items: center;
    z-index: 200;
    .icon {
      width: 94rpx;
      height: 94rpx;
    }
    .number {
      font-family: PingFangSC-Semibold;
      font-size: 12px;
      color: #ffffff;
      letter-spacing: 0;
      margin-top: 2rpx;
    }
  }
  .login_button {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100vw;
    height: 200rpx;
    font-family: PingFangSC-Medium;
    z-index: 9991;
    background: transparent;
  }
  .music_name_background {
    width: fit-content;
    height: fit-content;
    max-width: 562rpx;
    position: fixed;
    left: 32rpx;
    top: 878rpx;
    opacity: 0.45;
    background: #000000;
    border-radius: 6rpx;
    display: flex;
    flex-direction: column;
    .name {
      margin-top: 8rpx;
      font-family: PingFangSC-Semibold;
      font-size: 14px;
      color: #ffffff;
      letter-spacing: 0;
      padding-left: 24rpx;
      padding-right: 24rpx;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      z-index: 21;
    }
    .album {
      margin-top: 4rpx;
      font-family: PingFangSC-Regular;
      font-size: 12px;
      color: #dedfde;
      letter-spacing: 0;
      margin-bottom: 16rpx;
      padding-left: 24rpx;
      padding-right: 24rpx;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      z-index: 21;
    }
  }
  .music_name_container {
    width: 376rpx;
    height: 112rpx;
    max-width: 562rpx;
    margin-top: 152rpx;
    z-index: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    padding-left: 30rpx;
    background-image: linear-gradient(to left, rgba(0, 0, 0, 0.00) 4%, rgba(0, 0, 0, 0.55) 95%, rgba(0, 0, 0, 0.55) 95%);
    .name {
      width: 376rpx;
      margin-top: 18rpx;
      font-family: PingFangSC-Semibold;
      font-size: 28rpx;
      color: #fff;
      letter-spacing: 0;
      padding-left: 24rpx;
      padding-right: 24rpx;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      z-index: 21;
    }
    .album {
      width: 376rpx;
      font-family: PingFangSC-Regular;
      font-size: 12px;
      color: #fff;
      letter-spacing: 0;
      margin-bottom: 16rpx;
      padding-left: 24rpx;
      padding-right: 24rpx;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      z-index: 21;
      line-height: 52rpx;
    }
  }
  .play_icon {
    position: fixed;
    width: 72rpx;
    height: 80rpx;
    top: 50%;
    margin-top: -40rp;
    z-index: 10000;
    left: 50%;
    margin-left: -36rpx;
  }
  .bottom_seek_1 {
    background: #767676;
    left: 0rpx;
    right: 60rpx;
    height: 4rpx;
    position: absolute;
    bottom: 0rpx;
    z-index: 100;
  }
  .tip_type {
    background: #000000;
    border-radius: 10rpx;
    position: fixed;
    margin-top: 150rpx;
    min-height: 55rpx;
    max-width: 560rpx;
    z-index: 100;
  }
  .tipText_type {
    font-family: PingFangSC-Semibold;
    font-size: 28rpx;
    color: #FFFFFF;
    letter-spacing: 0;
    text-align: center;
    margin-left: 32rpx;
    margin-right: 32rpx;
    margin-top: 10rpx;
  }
  .add_practice_sing {
    width: 228rpx;
    height: 72rpx;
    position: fixed;
    right: 110rpx;
    top: 730rpx;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    z-index: 1;
    .practice_bg {
      width: 228rpx;
      height: 72rpx;
      position: absolute;
      z-index: 1;
    }
    .practice_txt {
      font-family: PingFangSC-Regular;
      font-size: 28rpx;
      color: #FFF;
      margin-right: 6rpx;
      z-index: 1;
    }
    .practice_close {
      width: 24rpx;
      height: 24rpx;
      z-index: 1;
    }
  }
  .audio_auth_box {
    width: 100vw;
    height: 100vh;
    position: fixed;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.47);
    .audio_auth_container {
      background: #fff;
      width: 554rpx;
      height: 238rpx;
      .audio_auth_title {
        width: 554rpx;
        height: 142rpx;
        line-height: 142rpx;
        border-bottom: 2rpx solid #EAEAEA;
        text-align: center;
        font-family: PingFangSC-Medium;
        font-size: 30rpx;
        color: #4A4A4A;
        letter-spacing: 0;
      }
      .audio_auth_btn {
        color: #2ED73C;
        font-family: PingFangSC-Medium;
        font-size: 30rpx;
        height: 90rpx;
        line-height: 90rpx;
        border: 2rpx solid transparent;
        background-color: transparent;
        letter-spacing: 0;
        text-align: center;
      }
      .audio_auth_btn::after {
        border: none;
      }
    }
  }
  .hp_c {
    width: 100vw;
    height: 100vh;
    position: fixed;
  }
  .swiperItem {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    flex-direction: column;
  }
  .last_week_rank {
    width: 670rpx;
    height: 196rpx;
    background: rgba(0, 0, 0, 0.7);
    border-radius: 20rpx;
    z-index: 1;
    margin-top: 12rpx;
    margin-left: 40rpx;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    .last_week_top {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
      width: 634rpx;
      .last_week_topl {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: flex-start;
        background-image: linear-gradient(-180deg, #7F09FF 4%, #4A01B5 98%);
        border-radius: 34rpx;
        height: 60rpx;
        overflow: hidden;
        padding: 4rpx 10rpx;
        .rank_title {
          margin-left: 12rpx;
          width: 190rpx;
          height: 84rpx;
          z-index: 1;
          position: absolute;
        }
        .nickname_box {
          // padding: 4rpx 10rpx 4rpx 10rpx;
          background: #D4B3FE;
          box-shadow: inset 0 4rpx 6rpx 0 rgba(81, 0, 168, 0.73); // margin-right: 10rpx;
          border-radius: 0rpx 30rpx 30rpx 0rpx;
          height: 60rpx;
          padding: 0 14rpx;
          display: flex;
          flex-direction: row;
          justify-content: center;
          align-items: center;
        }
        .nickname {
          font-family: PingFangSC-Medium;
          font-size: 28rpx;
          color: #54239A;
          height: 40rpx;
          line-height: 40rpx;
          margin-right: 6rpx;
        }
      }
    }
    .indacator {
      width: 12rpx;
      height: 20rpx;
      margin-left: 12rpx;
    }
    .last_week_topr {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: flex-start;
      .last_week_topr_title {
        width: 200rpx;
        height: 48rpx;
        line-height: 48rpx;
        font-family: PingFangSC-Regular;
        font-size: 24rpx;
        color: #FFFFFF;
        text-align: right;
      }
      .indacator {
        width: 12rpx;
        height: 20rpx;
      }
    }
  }
  .last_week_bottom {
    display: flex;
    width: 634rpx;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    margin-top: 22rpx;
  }
  .rank_play_audio_box {
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    z-index: 1;
    width: 310rpx;
    height: 64rpx;
    background: #fff;
    border-radius: 32rpx;
  }
  .rank_play_btn {
    width: 36rpx;
    height: 36rpx;
    margin-left: 60rpx; // z-index: 1;
  }
  .rank_play_tips {
    font-family: PingFangSC-Regular;
    font-size: 28rpx;
    color: #303030;
    margin-left: 18rpx;
  }
  .rank_like_box {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    z-index: 1;
    width: 142rpx;
    height: 64rpx;
  }
  .rank_like_tips {
    font-family: PingFangSC-Regular;
    font-size: 24rpx;
    color: #FFFFFF;
    margin-left: 10rpx;
  }
  .rank_redbag {
    z-index: 1;
    width: 100rpx;
    height: 64rpx;
    padding-left: 110rpx;
  }
  .rank_like_icon {
    width: 44rpx;
    height: 40rpx;
  }
  .userImage {
    border: 2rpx solid #303030;
    width: 80rpx;
    height: 80rpx;
    border-radius: 50%;
    position: absolute;
    left: -2rpx; // top: 10rpx;
  }
  .follow_btn {
    width: 44rpx;
    height: 44rpx;
    position: absolute;
    left: 16rpx;
    bottom: -20rpx;
  }
  .period_box {
    display: flex;
    align-items: center;
    position: relative;
    width: 200rpx;
    height: 84rpx;
  }
  .period_title {
    font-family: PingFangSC-Semibold;
    font-size: 28rpx;
    color: #FFFFFF;
    line-height: 84rpx;
    padding: 0 6rpx;
    margin-left: 10rpx;
  }
  .period_doubt {
    width: 34rpx;
    height: 34rpx;
    margin-left: 6rpx;
  }
  .love_count {
    position: absolute;
    top: 100rpx;
    padding: 20rpx;
    display: flex;
    flex-direction: column;
    align-items: center;
    z-index: 200;
    font-family: PingFangSC-Semibold;
    font-size: 24rpx;
    color: #ffffff;
    letter-spacing: 0;
  }

</style>
